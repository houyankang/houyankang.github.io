<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring Cloud Alibaba</title>
    <url>/2020/08/11/Spring%20Cloud%20Alibaba/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h1><a id="more"></a>

<h3 id="一、Spring-Cloud-Alibaba"><a href="#一、Spring-Cloud-Alibaba" class="headerlink" title="一、Spring Cloud Alibaba"></a>一、Spring Cloud Alibaba</h3><h4 id="1-1-微服务概述"><a href="#1-1-微服务概述" class="headerlink" title="1.1 微服务概述"></a>1.1 微服务概述</h4><p><img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200731143046380.png" alt="image-20200731143046380"></p>
<blockquote>
<p>一个软件应用，往往会将应用所有功能都开发和打包在一起，那时候的一个B/S应用架构往往是这样的：<img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200731143208612.png" alt="image-20200731143208612"></p>
</blockquote>
<blockquote>
<p>单体项目的缺陷：<br>代码臃肿，应用启动时间长；（代码超过1G的项目都有！）<br>回归测试周期长，修复一个小小bug可能都需要对所有关键业务进行回归测试。<br>应用容错性差，某个小小功能的程序错误可能导致整个系统宕机；<br>伸缩困难，单体应用扩展性能时只能整个应用进行扩展，造成计算资源浪费。<br>开发协作困难，一个大型应用系统，可能几十个甚至上百个开发人员，大家都在维护一套代码的话，代码<br>merge复杂度急剧增加。</p>
</blockquote>
<blockquote>
<p>SOA（Service-Oriented Architecture）-面向服务的体系架构</p>
</blockquote>
<blockquote>
<p>微服务架构（Microservice Architecture）是一种架构概念，旨在通过将功能分解到各个离散的服务中以实现对<br>解决方案的解耦。你可以将其看作是在架构层次而非获取服务的<br>类上应用很多SOLID原则。微服务架构是个很有趣的概念，它的主要作用是将功能分解到离散的各个服务当<br>中，从而降低系统的耦合性，并提供更加灵活的服务支持。</p>
</blockquote>
<blockquote>
<p><strong>概念</strong>：把一个大型的单个应用程序和服务拆分为数个甚至数十个的支持微服务，它可扩展单个组件而不是整<br>个的应用程序堆栈，从而满足服务等级协议。<br><strong>定义</strong>：围绕业务领域组件来创建应用，这些应用可独立地进行开发、管理和迭代。在分散的组件中使用云架<br>构和平台式部署、管理和服务功能，使产品交付变得更加简单。<br>本质：用一些功能比较明确、业务比较精练的服务去解决更大、更实际的问题。</p>
</blockquote>
<p><img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200731143427205.png" alt="image-20200731143427205"></p>
<blockquote>
<p>微服务的应用场景：<br>◆ 大型复杂的系统 例如大型电商系统<br>◆ 高并发系统 例如大型门户网站,商品秒杀系统<br>◆ 需求不明确,且变更很快的系统 例如创业公司业务系统</p>
</blockquote>
<h4 id="1-2-主流微服务技术"><a href="#1-2-主流微服务技术" class="headerlink" title="1.2 主流微服务技术"></a>1.2 主流微服务技术</h4><blockquote>
<p>1.Dubbo/DubboX<br>Dubbo:<a href="http://dubbo.apache.org/zh-cn/">http://dubbo.apache.org/zh-cn/</a><br>DubboX:<a href="https://github.com/dangdangdotcom/dubbox">https://github.com/dangdangdotcom/dubbox</a><br>2.gRPC<br><a href="https://grpc.io/docs/what-is-grpc/core-concepts/#service-definition">https://grpc.io/docs/what-is-grpc/core-concepts/#service-definition</a><br>3.Spring Cloud Netflex<br><a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a><br>4.Spring Cloud Alibaba<br><a href="https://spring.io/projects/spring-cloud-alibaba">https://spring.io/projects/spring-cloud-alibaba</a> 主流<br>5.Servicecomb<br><a href="http://servicecomb.apache.org/">http://servicecomb.apache.org/</a></p>
<p>6.Istio<br>Istio是什么：Istio是Google/IBM/Ly?联合开发的开源项目，2017年5月发布第一个release 0.1.0<br><a href="https://istio.io/">https://istio.io/</a></p>
</blockquote>
<h4 id="1-3-微服务十二要素"><a href="#1-3-微服务十二要素" class="headerlink" title="1.3 微服务十二要素"></a>1.3 微服务十二要素</h4><blockquote>
<p>12factor：<a href="https://12factor.net/">https://12factor.net/</a></p>
</blockquote>
<blockquote>
<p><strong>原则1：一份基准代码，多份部署</strong></p>
<p><strong>原则2：显式声明依赖关系</strong></p>
<p><strong>原则3：在环境中存储配置</strong></p>
<p><strong>原则4：把后端服务当作附加资源</strong></p>
<p><strong>原则5：严格分离构建、发布和运行</strong></p>
<p><strong>原则6：以一个或多个无状态的进程运行应用</strong></p>
<p><strong>原则7：通过端口绑定提供服务</strong></p>
<p><strong>原则8：通过进程模型进行扩展</strong></p>
<p><strong>原则9：快速启动和优雅终止可最大化健壮性</strong></p>
<p><strong>原则10：开发环境与线上环境等价</strong></p>
<p><strong>原则11：把日志当作事件流</strong></p>
<p><strong>原则12：后台管理任务当作一次性进程运行</strong></p>
</blockquote>
<h4 id="1-4-Spring-Cloud-Alibaba"><a href="#1-4-Spring-Cloud-Alibaba" class="headerlink" title="1.4 Spring Cloud Alibaba"></a>1.4 Spring Cloud Alibaba</h4><blockquote>
<p>SpringCloud Alibaba是阿里巴巴公司基于Spring Cloud所开发的一套微服务框架集<br>Spring Cloud Alibaba 致力于提供微服务应用服务开发的一站式解决方案。项目包含开发微服务应用服务的必<br>需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发微服务应用服务。</p>
</blockquote>
<h4 id="1-5-核心组件"><a href="#1-5-核心组件" class="headerlink" title="1.5 核心组件"></a>1.5 核心组件</h4><p><strong>1.服务发现和配置中心 Nacos</strong></p>
<blockquote>
<ul>
<li>服务发现原理剖析</li>
<li>Nacos Server/Clinet</li>
<li>高可用Nacos搭建</li>
</ul>
</blockquote>
<p><strong>2.负载均衡Ribbon</strong></p>
<blockquote>
<ul>
<li>负载均衡常见模式</li>
<li><code>RestTemplate</code>整合Ribbon</li>
</ul>
</blockquote>
<p><strong>3.声明式HTTP客户端-Feign</strong></p>
<blockquote>
<ul>
<li>如何使用Fegin</li>
<li>Fegin配置自定义</li>
</ul>
</blockquote>
<p><strong>4.服务容错Sentinel</strong></p>
<blockquote>
<ul>
<li>服务容错原理</li>
<li>Sentinel</li>
<li>Sentinel Dashboard</li>
<li>Sentinel核心原理分析</li>
</ul>
</blockquote>
<p><strong>5.消息驱动RocketMQ</strong></p>
<blockquote>
<ul>
<li>SpringCloud Stream</li>
<li>实现异步消息推送与消费</li>
</ul>
</blockquote>
<p><strong>6.API网关GateWay</strong></p>
<blockquote>
<ul>
<li>整合GateWay</li>
<li>三个核心</li>
<li>聚合微服务请求</li>
</ul>
</blockquote>
<p>**</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>个人博客搭建</title>
    <url>/2020/08/11/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<a id="more"></a>


<h3 id="一、基本准备"><a href="#一、基本准备" class="headerlink" title="一、基本准备"></a>一、基本准备</h3><h4 id="1-1-Github账号"><a href="#1-1-Github账号" class="headerlink" title="1.1 Github账号"></a>1.1 Github账号</h4><blockquote>
<ul>
<li><p>官网：<a href="https://github.com/">https://github.com/</a></p>
</li>
<li><p>全球最大的代码托管/分享平台，全球可访问，纯英文，免费</p>
</li>
<li><p>免费注册账号 1 个</p>
</li>
</ul>
</blockquote>
<h4 id="1-2-GitBash"><a href="#1-2-GitBash" class="headerlink" title="1.2 GitBash"></a>1.2 GitBash</h4><blockquote>
<ul>
<li>官网：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a></li>
<li>Windows平台的代码版本管理工具</li>
<li>下载，安装(无脑下一步)</li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200421212955598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200812104602132.png" alt="image-20200812104602132"></p>
<p><img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200812104622298.png" alt="image-20200812104622298"></p>
<p>剩下的，一路默认就行（安装路径根据自己需要更改）。</p>
<h4 id="1-3-GitHub-Desktop"><a href="#1-3-GitHub-Desktop" class="headerlink" title="1.3 GitHub Desktop"></a>1.3 GitHub Desktop</h4><blockquote>
<ul>
<li>官网：<a href="https://desktop.github.com/">https://desktop.github.com/</a></li>
<li>GitHub 的桌面版，为部署到 github.io 公网路径时使用。</li>
<li>下载，安装(无脑下一步)</li>
</ul>
</blockquote>
<p><img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200812105316836.png" alt="image-20200812105316836"></p>
<h4 id="1-4-Node-js"><a href="#1-4-Node-js" class="headerlink" title="1.4 Node.js"></a>1.4 Node.js</h4><blockquote>
<ul>
<li>官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></li>
<li>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台，用的是它集成的包管理工具 npm。</li>
<li>下载，安装(无脑下一步)</li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200421213512545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>一路默认就行（安装路径根据自己需要更改）。</p>
<h3 id="二、Hexo准备工作"><a href="#二、Hexo准备工作" class="headerlink" title="二、Hexo准备工作"></a>二、Hexo准备工作</h3><h4 id="2-1-Hexo-下载安装"><a href="#2-1-Hexo-下载安装" class="headerlink" title="2.1 Hexo 下载安装"></a>2.1 Hexo 下载安装</h4><p>① 在任意位置点击鼠标右键，选择Git Bash</p>
<p><img src="https://img-blog.csdnimg.cn/20200421214056510.png" alt="在这里插入图片描述"></p>
<p>② 安装Hexo命令：<code>npm install -g hexo</code></p>
<p><img src="https://img-blog.csdnimg.cn/2020042121420960.png" alt="在这里插入图片描述"></p>
<h4 id="2-2-Hexo-初始化配置"><a href="#2-2-Hexo-初始化配置" class="headerlink" title="2.2 Hexo 初始化配置"></a>2.2 Hexo 初始化配置</h4><ol>
<li><p>创建文件夹（我的是在D盘创建的Hexo）</p>
<p><img src="https://img-blog.csdnimg.cn/20200421214322325.png" alt="在这里插入图片描述"></p>
</li>
<li><p>在Hexo文件下，右键运行Git Bash，输入命令：<code>hexo init</code></p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200421214352172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="3">
<li>在<code>_config.yml</code>,进行基础配置</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200421214553612.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200421214608786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="3">
<li>主题选择（博客整体外观哦）</li>
</ol>
<blockquote>
<p>Hexo的主题分享页：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>该页面里点击图片是预览，点击主题的名字则是进入git中，获取其git主题路径，然后在Hexo文件夹下使用 Git Bash。<br>输入命令(注意空格)：<code>git clone 主题的git链接 themes/目录名</code><br>eg: <strong>git clone <a href="https://github.com/wujun234/hexo-theme-tree.git">https://github.com/wujun234/hexo-theme-tree.git</a> themes/tree</strong></p>
<p><a href="">注意：themes后面的文件夹名称要跟主题名称一致，然后在博客文件夹(GitHub账号.github.io)下的<code>_config.yml</code>文件中进行主题配置</a></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200421220145611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200421214736505.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200421214832967.png" alt="在这里插入图片描述"></p>
<p><img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200812215818930.png" alt="image-20200812215818930"></p>
<h3 id="三、博客更新、预览、部署-外网访问"><a href="#三、博客更新、预览、部署-外网访问" class="headerlink" title="三、博客更新、预览、部署(外网访问)"></a>三、博客更新、预览、部署(外网访问)</h3><h4 id="3-1-文章更新"><a href="#3-1-文章更新" class="headerlink" title="3.1 文章更新"></a>3.1 文章更新</h4><p>在 <code>磁盘:\Hexo\source\_posts</code>文件下，新建.md文件就可以以 markdown 格式写文章。<br>.md格式，即 markdown 格式的文本，</p>
<p><img src="https://img-blog.csdnimg.cn/20200421215001116.png" alt="在这里插入图片描述"></p>
<h4 id="3-2-博客本地浏览方式"><a href="#3-2-博客本地浏览方式" class="headerlink" title="3.2 博客本地浏览方式"></a>3.2 博客本地浏览方式</h4><p>① Git Bash 输入命令：<code>hexo g &amp;&amp; hexo s</code></p>
<p><img src="https://img-blog.csdnimg.cn/20200421215039349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>② 在浏览器输入：<code>http://localhost:4000</code> ，就可以进行访问</p>
<p><img src="https://img-blog.csdnimg.cn/20200421215146873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="3-3-博客部署到-GitHub-上"><a href="#3-3-博客部署到-GitHub-上" class="headerlink" title="3.3 博客部署到 GitHub 上"></a>3.3 博客部署到 GitHub 上</h4><p>① 登陆 github 账号，<code>new repository</code>创建仓库、获取同名的<code>https 仓库源地址</code>：</p>
<p><img src="https://img-blog.csdnimg.cn/20200421171618433.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200421172106569.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200421172245529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>② 在博客文件夹(GitHub账号.github.io)下的<code>_config.yml</code> 进行配置：</p>
<p><img src="https://img-blog.csdnimg.cn/20200421171729148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>③ 安装 hexo-deployer-git 自动部署发布工具</p>
<p>安装命令(注意路径)：<code>npm install hexo-deployer-git --save</code></p>
<p><img src="https://img-blog.csdnimg.cn/2020042117181819.png" alt="在这里插入图片描述"></p>
<p>④ 一键发布到 GitHub：</p>
<p>发布命令(注意路径)：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code><br>第一次发布会需要填入 github 账号密码，正确填入即可。</p>
<p><img src="https://img-blog.csdnimg.cn/20200421171915701.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200421171928437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>⑤ 测试访问：<br>在浏览器输入：<a href="https://janycode.github.io/">https://janycode.github.io/</a></p>
<h4 id="3-4-更新-Git部署"><a href="#3-4-更新-Git部署" class="headerlink" title="3.4 更新 + Git部署"></a>3.4 更新 + Git部署</h4><p>常规日常更新操作四步走：<br>① 文章更新到固定路径下<br><code>磁盘:\Hexo\source\_posts\文章名称.md</code><br>② 进入 Hexo 目录<br><code>cd D:\Hexo</code><br>③ 本地部署，并浏览查看，确认无误<br><code>hexo g &amp;&amp; hexo s</code><br>④ 远程部署，push到git仓库，即可浏览 xxx.github.io 正式博客确认是否更新。<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>
<p>所有涉及到的命令统一使用右键里的 <code>Git Bash</code>，规避各种神坑。</p>
<p><img src="https://img-blog.csdnimg.cn/20200422004618401.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="四、-遇到的问题-amp-解决方案"><a href="#四、-遇到的问题-amp-解决方案" class="headerlink" title="四、 遇到的问题 &amp; 解决方案"></a>四、 遇到的问题 &amp; 解决方案</h3><h4 id="4-1-config-yml-中文乱码问题"><a href="#4-1-config-yml-中文乱码问题" class="headerlink" title="4.1 _config.yml 中文乱码问题"></a>4.1 _config.yml 中文乱码问题</h4><p>_config.yml 配置(我只改了这一部分，用记事本修改好像会出问题。<br>在 localhost:4000 上运行,标题和副标题都出现乱码。<br><img src="https://img-blog.csdnimg.cn/20200421233209511.png" alt="在这里插入图片描述"><br>为什么设置了zh-CN还会乱码呢？<br>解决方案：<br>1.不要用记事本打开，因为记事本不会utf8转码，<code>用sublime text编辑</code>。<br>2.或者用记事本打开另保存为utf-8编码</p>
<h4 id="4-2-Push到git仓库时报错-fatal-HttpRequestException-encountered"><a href="#4-2-Push到git仓库时报错-fatal-HttpRequestException-encountered" class="headerlink" title="4.2 Push到git仓库时报错 fatal: HttpRequestException encountered"></a>4.2 Push到git仓库时报错 fatal: HttpRequestException encountered</h4><p>无论是push前先将远程仓库pull到本地仓库，还是强制push都会弹出这个问题。<br>网上查了一下发现是Github 禁用了TLS v1.0 and v1.1，必须更新Windows的git凭证管理器，才行。<br><a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0">https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0</a><br>点击下载安装 <code>GCMW-1.14.0.exe</code> ，测试远程push还是不行，灵机一动，万能的重启电脑，问题就解决了。ORZ…<br>此处切记一点，更新到远程git仓库时<code>使用 Git Bash 的命令行操作</code>。</p>
<p><img src="https://img-blog.csdnimg.cn/20200422004251889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="4-3-每次部署到远程-github-总是需要输入账号密码"><a href="#4-3-每次部署到远程-github-总是需要输入账号密码" class="headerlink" title="4.3 每次部署到远程 github 总是需要输入账号密码"></a>4.3 每次部署到远程 github 总是需要输入账号密码</h4><p><img src="https://img-blog.csdnimg.cn/2020042200525939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MTg0MDc1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>解决方案：<br><strong>配置SSH key</strong><br>1、 在任意文件夹下，右键git bash，配置生成公钥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span>（后三个空格即可，也可以根据提示输入）</span><br></pre></td></tr></table></figure>

<p>2、这时候.ssh下将出现两个文件id_rsa和id_rsa.pub，<code>id_rsa.pub是公钥</code>，打开<code>复制里面的内容</code>；<br>3、在github中的 yourname.github.io 仓库下的 setting 下的 deploy ssh 下添加 key,将上述内容复制即可，title任意；<br>4、测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>输入 yes，出现如下信息则正常：<br>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.<br>后续再使用 远程部署 命令则会自动登录，无需输入账号密码。</p>
<h4 id="4-4-YAMLException-end-of-the-stream-or-a-document-separator-is-expected-at"><a href="#4-4-YAMLException-end-of-the-stream-or-a-document-separator-is-expected-at" class="headerlink" title="4.4 YAMLException: end of the stream or a document separator is expected at"></a>4.4 YAMLException: end of the stream or a document separator is expected at</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YAMLException: end of the stream or a document separator is expected at line 26, column 1:</span><br></pre></td></tr></table></figure>

<p>检查所有出现 “———“ 的地方。<br>作横线的 “———-” 后面<code>少了一个空格的原因</code>,改成”———- “就好了，如果有类似报错，也请先检查空格。</p>
<h4 id="4-5-生成和设置分类-amp-标签"><a href="#4-5-生成和设置分类-amp-标签" class="headerlink" title="4.5 生成和设置分类&amp;标签"></a>4.5 生成和设置分类&amp;标签</h4><p>● 添加标签页面</p>
<p>① <code>hexo new page tags</code><br>② 确认站点配置文件里有 tag_dir: tags<br>③ 确认主题配置文件里有 tags: /tags<br>④ 编辑站点的 source/tags/index.md 顶部 Front Matter</p>
<p>● 添加分类页面</p>
<p>① <code>hexo new page categories</code><br>② 确认站点配置文件里有 category_dir: categories<br>③ 确认主题配置文件里有 categories: /categories<br>④ 编辑站点的 source/categories/index.md 顶部 Front Matter</p>
<p>● 文章顶部标签</p>
<p>Typora软件中【段落】-【YAML Front Matter】生成顶部标识。</p>
<p>在两个 — 之间，<code>冒号后面要有空格</code>。<br>要使用命令添加 tags 和 categories 页面；且主题的配置文件和站点的配置文件 tags 和 categories 的注释要打开</p>
<p>文章顶部标识：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">categories: </span><br><span class="line">- 一级分类</span><br><span class="line">- 二级分类</span><br><span class="line">tags:</span><br><span class="line">- 关键词1</span><br><span class="line">- 关键词2</span><br></pre></td></tr></table></figure>

<h3 id="五、技巧："><a href="#五、技巧：" class="headerlink" title="五、技巧："></a>五、技巧：</h3><p>每个人的博客可能会有不同，我的博客开启评论和标题的操作是：</p>
<h4 id="1-启用本主题："><a href="#1-启用本主题：" class="headerlink" title="1.启用本主题："></a>1.启用本主题：</h4><p>更改站点设置文件<code>_config.yml</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: lx</span><br></pre></td></tr></table></figure>

<p>主题的配置将在<code>themes/lx/_config.yml</code>中进行。</p>
<h4 id="2-统计"><a href="#2-统计" class="headerlink" title="2.统计"></a>2.统计</h4><p>引入了百度统计和谷歌统计。</p>
<p>启用：在<code>themes/lx/_config.yml</code>填写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">google_analytics: ... ##谷歌统计ID</span><br><span class="line">baidu_analytics: ... ##百度统计ID</span><br></pre></td></tr></table></figure>

<h4 id="3-本地搜索"><a href="#3-本地搜索" class="headerlink" title="3.本地搜索"></a>3.本地搜索</h4><p>先下载插件<code>hexo-generator-searchdb</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb -s</span><br></pre></td></tr></table></figure>

<p>在<code>themes/lx/_config.yml</code>中配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h4 id="4-评论"><a href="#4-评论" class="headerlink" title="4.评论"></a>4.评论</h4><p>评论使用valine，官网：<a href="https://valine.js.org/">https://valine.js.org</a></p>
<p>启用：在<code>themes/lx/_config.yml</code>填写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">comment:</span><br><span class="line">  enable: true # true:启用 | false:停用</span><br><span class="line">  appid: ... #leancloud appid</span><br><span class="line">  appkey: ... #leancloud appkey</span><br><span class="line">  notify: false</span><br><span class="line">  verify: false</span><br><span class="line">  placeholder: 此处留言 #评论框文字</span><br><span class="line">  avatar: identicon #游客默认头像</span><br><span class="line">  guest_info: nick,mail,link #评论时需填写的内容（均为选填）</span><br><span class="line">  pageSize: 10 #一次性展示的评论数</span><br><span class="line">  language: zh-cn</span><br></pre></td></tr></table></figure>

<p>在文章头填入<code>comment: true</code>即可在该页面启用评论:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">date: ...</span><br><span class="line">title: ...</span><br><span class="line">categories: ...</span><br><span class="line">tags: ...</span><br><span class="line">comment: true &#x2F;&#x2F;启用评论</span><br><span class="line">mathjax: ...</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><code>appid</code>和<code>appkey</code>在leancloud创建应用后即可获取。</p>
<h4 id="5-社交媒体"><a href="#5-社交媒体" class="headerlink" title="5.社交媒体"></a>5.社交媒体</h4><p>社交媒体链接，在<code>themes/lx/_config.yml</code>配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  enable: true</span><br><span class="line">  links:</span><br><span class="line">    Github:</span><br><span class="line">      icon: gihub &#x2F;&#x2F;font-awesmome图标名称</span><br><span class="line">      link: ... &#x2F;&#x2F;链接地址</span><br></pre></td></tr></table></figure>

<h4 id="6-字体设置"><a href="#6-字体设置" class="headerlink" title="6.字体设置"></a>6.字体设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line">  host: &#x2F;&#x2F;fonts.googleapis.com</span><br><span class="line">  codes: ##代码字体</span><br><span class="line">    enable: true</span><br><span class="line">    family: Fira Code</span><br><span class="line">  else: ##文字字体</span><br><span class="line">    enable: false</span><br><span class="line">    family: </span><br></pre></td></tr></table></figure>

<h2 id="文章写作样式"><a href="#文章写作样式" class="headerlink" title="文章写作样式"></a>文章写作样式</h2><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>在<code>&lt;!--more--&gt;</code>标签之前的内容将作为文章摘要在首页展示。</p>
<h3 id="Note-tag"><a href="#Note-tag" class="headerlink" title="Note tag"></a>Note tag</h3><p>可选用<code>default</code>、<code>info</code>、<code>primary</code>、<code>success</code>、<code>warning</code>、<code>danger</code>。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%note default%&#125;</span><br><span class="line">### title</span><br><span class="line">content</span><br><span class="line">&#123;%endnote%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Label-tag"><a href="#Label-tag" class="headerlink" title="Label tag"></a>Label tag</h3><p>可选用<code>default</code>、<code>info</code>、<code>primary</code>、<code>success</code>、<code>warning</code>、<code>danger</code>。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%label default@content%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Button-tag"><a href="#Button-tag" class="headerlink" title="Button tag"></a>Button tag</h3><p>标准样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%btn url,content,hand-o-right fa-fw,title%&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p><code>url</code>：指向的链接</p>
<p><code>content</code>：内容</p>
<p><code>hand-o-right fa-fw</code>：图标，可换成其他图标。<code>fa-fw</code>：fix width</p>
<p><code>title</code>：title</p>
<h3 id="center-quote-tag"><a href="#center-quote-tag" class="headerlink" title="center-quote tag"></a>center-quote tag</h3><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%cq%&#125;</span><br><span class="line">人类的悲欢并不相通，我只觉得他们吵闹。&lt;br&gt;&lt;strong&gt;——鲁迅&lt;&#x2F;strong&gt;</span><br><span class="line">&#123;%endcq%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="video-tag"><a href="#video-tag" class="headerlink" title="video tag"></a>video tag</h3><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% video url %&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p><code>url</code>：视频链接</p>
]]></content>
  </entry>
</search>
