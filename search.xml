<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/08/11/Spring%20Cloud%20Alibaba/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h1><h3 id="一、Spring-Cloud-Alibaba"><a href="#一、Spring-Cloud-Alibaba" class="headerlink" title="一、Spring Cloud Alibaba"></a>一、Spring Cloud Alibaba</h3><h4 id="1-1-微服务概述"><a href="#1-1-微服务概述" class="headerlink" title="1.1 微服务概述"></a>1.1 微服务概述</h4><p><img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200731143046380.png" alt="image-20200731143046380"></p>
<blockquote>
<p>一个软件应用，往往会将应用所有功能都开发和打包在一起，那时候的一个B/S应用架构往往是这样的：<img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200731143208612.png" alt="image-20200731143208612"></p>
</blockquote>
<blockquote>
<p>单体项目的缺陷：<br>代码臃肿，应用启动时间长；（代码超过1G的项目都有！）<br>回归测试周期长，修复一个小小bug可能都需要对所有关键业务进行回归测试。<br>应用容错性差，某个小小功能的程序错误可能导致整个系统宕机；<br>伸缩困难，单体应用扩展性能时只能整个应用进行扩展，造成计算资源浪费。<br>开发协作困难，一个大型应用系统，可能几十个甚至上百个开发人员，大家都在维护一套代码的话，代码<br>merge复杂度急剧增加。</p>
</blockquote>
<blockquote>
<p>SOA（Service-Oriented Architecture）-面向服务的体系架构</p>
</blockquote>
<blockquote>
<p>微服务架构（Microservice Architecture）是一种架构概念，旨在通过将功能分解到各个离散的服务中以实现对<br>解决方案的解耦。你可以将其看作是在架构层次而非获取服务的<br>类上应用很多SOLID原则。微服务架构是个很有趣的概念，它的主要作用是将功能分解到离散的各个服务当<br>中，从而降低系统的耦合性，并提供更加灵活的服务支持。</p>
</blockquote>
<blockquote>
<p><strong>概念</strong>：把一个大型的单个应用程序和服务拆分为数个甚至数十个的支持微服务，它可扩展单个组件而不是整<br>个的应用程序堆栈，从而满足服务等级协议。<br><strong>定义</strong>：围绕业务领域组件来创建应用，这些应用可独立地进行开发、管理和迭代。在分散的组件中使用云架<br>构和平台式部署、管理和服务功能，使产品交付变得更加简单。<br>本质：用一些功能比较明确、业务比较精练的服务去解决更大、更实际的问题。</p>
</blockquote>
<p><img src="https://yankang.oss-cn-beijing.aliyuncs.com/imgs/image-20200731143427205.png" alt="image-20200731143427205"></p>
<blockquote>
<p>微服务的应用场景：<br>◆ 大型复杂的系统 例如大型电商系统<br>◆ 高并发系统 例如大型门户网站,商品秒杀系统<br>◆ 需求不明确,且变更很快的系统 例如创业公司业务系统</p>
</blockquote>
<h4 id="1-2-主流微服务技术"><a href="#1-2-主流微服务技术" class="headerlink" title="1.2 主流微服务技术"></a>1.2 主流微服务技术</h4><blockquote>
<p>1.Dubbo/DubboX<br>Dubbo:<a href="http://dubbo.apache.org/zh-cn/">http://dubbo.apache.org/zh-cn/</a><br>DubboX:<a href="https://github.com/dangdangdotcom/dubbox">https://github.com/dangdangdotcom/dubbox</a><br>2.gRPC<br><a href="https://grpc.io/docs/what-is-grpc/core-concepts/#service-definition">https://grpc.io/docs/what-is-grpc/core-concepts/#service-definition</a><br>3.Spring Cloud Netflex<br><a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a><br>4.Spring Cloud Alibaba<br><a href="https://spring.io/projects/spring-cloud-alibaba">https://spring.io/projects/spring-cloud-alibaba</a> 主流<br>5.Servicecomb<br><a href="http://servicecomb.apache.org/">http://servicecomb.apache.org/</a></p>
<p>6.Istio<br>Istio是什么：Istio是Google/IBM/Ly?联合开发的开源项目，2017年5月发布第一个release 0.1.0<br><a href="https://istio.io/">https://istio.io/</a></p>
</blockquote>
<h4 id="1-3-微服务十二要素"><a href="#1-3-微服务十二要素" class="headerlink" title="1.3 微服务十二要素"></a>1.3 微服务十二要素</h4><blockquote>
<p>12factor：<a href="https://12factor.net/">https://12factor.net/</a></p>
</blockquote>
<blockquote>
<p><strong>原则1：一份基准代码，多份部署</strong></p>
<p><strong>原则2：显式声明依赖关系</strong></p>
<p><strong>原则3：在环境中存储配置</strong></p>
<p><strong>原则4：把后端服务当作附加资源</strong></p>
<p><strong>原则5：严格分离构建、发布和运行</strong></p>
<p><strong>原则6：以一个或多个无状态的进程运行应用</strong></p>
<p><strong>原则7：通过端口绑定提供服务</strong></p>
<p><strong>原则8：通过进程模型进行扩展</strong></p>
<p><strong>原则9：快速启动和优雅终止可最大化健壮性</strong></p>
<p><strong>原则10：开发环境与线上环境等价</strong></p>
<p><strong>原则11：把日志当作事件流</strong></p>
<p><strong>原则12：后台管理任务当作一次性进程运行</strong></p>
</blockquote>
<h4 id="1-4-Spring-Cloud-Alibaba"><a href="#1-4-Spring-Cloud-Alibaba" class="headerlink" title="1.4 Spring Cloud Alibaba"></a>1.4 Spring Cloud Alibaba</h4><blockquote>
<p>SpringCloud Alibaba是阿里巴巴公司基于Spring Cloud所开发的一套微服务框架集<br>Spring Cloud Alibaba 致力于提供微服务应用服务开发的一站式解决方案。项目包含开发微服务应用服务的必<br>需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发微服务应用服务。</p>
</blockquote>
<h4 id="1-5-核心组件"><a href="#1-5-核心组件" class="headerlink" title="1.5 核心组件"></a>1.5 核心组件</h4><p><strong>1.服务发现和配置中心 Nacos</strong></p>
<blockquote>
<ul>
<li>服务发现原理剖析</li>
<li>Nacos Server/Clinet</li>
<li>高可用Nacos搭建</li>
</ul>
</blockquote>
<p><strong>2.负载均衡Ribbon</strong></p>
<blockquote>
<ul>
<li>负载均衡常见模式</li>
<li><code>RestTemplate</code>整合Ribbon</li>
</ul>
</blockquote>
<p><strong>3.声明式HTTP客户端-Feign</strong></p>
<blockquote>
<ul>
<li>如何使用Fegin</li>
<li>Fegin配置自定义</li>
</ul>
</blockquote>
<p><strong>4.服务容错Sentinel</strong></p>
<blockquote>
<ul>
<li>服务容错原理</li>
<li>Sentinel</li>
<li>Sentinel Dashboard</li>
<li>Sentinel核心原理分析</li>
</ul>
</blockquote>
<p><strong>5.消息驱动RocketMQ</strong></p>
<blockquote>
<ul>
<li>SpringCloud Stream</li>
<li>实现异步消息推送与消费</li>
</ul>
</blockquote>
<p><strong>6.API网关GateWay</strong></p>
<blockquote>
<ul>
<li>整合GateWay</li>
<li>三个核心</li>
<li>聚合微服务请求</li>
</ul>
</blockquote>
<p>**</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
